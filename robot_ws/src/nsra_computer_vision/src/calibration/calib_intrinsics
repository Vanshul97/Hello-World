#!/usr/bin/python

import cv2
import time
import multiprocessing as mp
import numpy as np
import rospkg
import yaml
import thread
import sys

rospack = rospkg.RosPack()

class camera():

    def __init__(self,rtsp_url):        
        #load pipe for data transmittion to the process
        self.parent_conn, child_conn = mp.Pipe()
        #load process
        self.p = mp.Process(target=self.update, args=(child_conn,rtsp_url))        
        #start process
        self.p.daemon = True
        self.p.start()

    def end(self):
        #send closure request to process

        self.parent_conn.send(2)

    def update(self,conn,rtsp_url):
        #load cam into seperate process

        print("Cam Loading...")
        cap = cv2.VideoCapture(rtsp_url,cv2.CAP_FFMPEG)   
        print("Cam Loaded...")
        run = True

        while run:

            #grab frames from the buffer
            cap.grab()

            #recieve input data
            rec_dat = conn.recv()


            if rec_dat == 1:
                #if frame requested
                ret,frame = cap.read()
                conn.send(frame)

            elif rec_dat ==2:
                #if close requested
                cap.release()
                run = False

        print("Camera Connection Closed")        
        conn.close()

    def get_frame(self,resize=None):
        ###used to grab frames from the cam connection process

        ##[resize] param : % of size reduction or increase i.e 0.65 for 35% reduction  or 1.5 for a 50% increase

        #send request
        self.parent_conn.send(1)
        frame = self.parent_conn.recv()

        #reset request 
        self.parent_conn.send(0)

        #resize if needed
        if resize == None:            
            return frame
        else:
            return self.rescale_frame(frame,resize)

    def rescale_frame(self,frame, percent=65):

        return cv2.resize(frame,None,fx=percent,fy=percent) 

cam_left = camera(str(sys.argv[1]))
cam_right = camera(str(sys.argv[2]))

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

objp = np.zeros((6*9,3), np.float32)
objp[:,:2] = np.mgrid[0:225:25,0:150:25].T.reshape(-1,2)

print(objp)

objpoints_left = [] 
objpoints_right = [] 

imgpoints_left = [] 
imgpoints_right = [] 

img_nb = int(sys.argv[3])

pack_path = rospack.get_path('nsra_computer_vision')

def findCBC_LEFT(img):
    image_name = pack_path + '/images/left' + str(img_nb + 1) + '.jpg'
    cv2.imwrite(image_name, img)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret, corners = cv2.findChessboardCorners(gray, (6,9), None)
    if ret == True:
        objpoints_left.append(objp)
        corners2 = cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        imgpoints_left.append(corners2)
    else:
        print("No corners detected in the left image!")     

def findCBC_RIGHT(img):
    image_name = pack_path + '/images/right' + str(img_nb + 1) + '.jpg'
    cv2.imwrite(image_name, img)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    ret, corners = cv2.findChessboardCorners(gray, (6,9), None)
    if ret == True:
        objpoints_right.append(objp)
        corners2 = cv2.cornerSubPix(gray,corners,(11,11),(-1,-1),criteria)
        imgpoints_right.append(corners2)
    else:
        print("No corners detected in the right image!")

while(1):
    img_left = cam_left.get_frame(0.65)
    img_right = cam_right.get_frame(0.65)

    cv2.imshow('left camera', img_left)
    cv2.imshow('right camera', img_right)

    key = cv2.waitKey(1)

    if key == 27:
        break
    elif (key == 10) and (img_nb > 0):
        print("Remaining Images: " + str(img_nb))
        img_nb -= 1
        
        thread.start_new_thread(findCBC_LEFT,(img_left,))
        thread.start_new_thread(findCBC_RIGHT,(img_right,))
    elif(img_nb == 0):
        ret1, mtx1, dist1, rvecs1, tvecs1 = cv2.calibrateCamera(objpoints_left, imgpoints_left, (1920,1080), None, None)
        print("RMS1: " + str(ret1))
        #data1 = {'K': np.asarray(mtx1).tolist(),
        #        'D': np.asarray(dist1).tolist()}

        #with open(pack_path + "/config/intrinsics_left.yaml", "w") as f1:
        #    yaml.dump(data1, f1)

        fsl = cv2.FileStorage(pack_path + "/config/intrinsics_left.yml", flags=1)
        fsl.write(name='K', val=mtx1)
        fsl.write(name='D', val=dist1)
        fsl.release()

        ret2, mtx2, dist2, rvecs2, tvecs2 = cv2.calibrateCamera(objpoints_right, imgpoints_right, (1920,1080), None, None)
        print("RMS2: " + str(ret2)) 
        #data2 = {'K': np.asarray(mtx2).tolist(),
        #        'D': np.asarray(dist2).tolist()}

        #with open(pack_path + "/config/intrinsics_right.yaml", "w") as f2:
        #    yaml.dump(data2, f2)

        fsr = cv2.FileStorage(pack_path + "/config/intrinsics_right.yml", flags=1)
        fsr.write(name='K', val=mtx2)
        fsr.write(name='D', val=dist2)
        fsr.release()

        break
            
cv2.destroyAllWindows()     

cam_left.end()
cam_right.end()

